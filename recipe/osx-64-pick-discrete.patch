Index: llama.cpp/ggml-metal.m
===================================================================
--- llama.cpp.orig/ggml-metal.m	2024-03-29 09:58:42.017335817 -0500
+++ llama.cpp/ggml-metal.m	2024-03-29 10:53:21.920375847 -0500
@@ -257,18 +257,28 @@
 static struct ggml_metal_context * ggml_metal_init(int n_cb) {
     GGML_METAL_LOG_INFO("%s: allocating\n", __func__);
 
+    // Pick and show default Metal device
+    id <MTLDevice> device = MTLCreateSystemDefaultDevice();
+
 #if TARGET_OS_OSX && !GGML_METAL_NDEBUG
+    GGML_METAL_LOG_INFO("%s: found default device: %s\n", __func__, [[device name] UTF8String]);
     // Show all the Metal device instances in the system
     NSArray * devices = MTLCopyAllDevices();
-    for (id<MTLDevice> device in devices) {
-        GGML_METAL_LOG_INFO("%s: found device: %s\n", __func__, [[device name] UTF8String]);
+    for (id<MTLDevice> dev in devices) {
+        if ([dev isRemovable]) {
+            GGML_METAL_LOG_INFO("%s: found external device: %s\n", __func__, [[dev name] UTF8String]);
+        } else if ([dev isLowPower]) {
+            GGML_METAL_LOG_INFO("%s: found integrated device: %s\n", __func__, [[dev name] UTF8String]);
+        } else {
+            GGML_METAL_LOG_INFO("%s: found discrete device: %s\n", __func__, [[dev name] UTF8String]);
+            device = dev;
+        }
     }
     [devices release]; // since it was created by a *Copy* C method
-#endif
-
-    // Pick and show default Metal device
-    id<MTLDevice> device = MTLCreateSystemDefaultDevice();
+    GGML_METAL_LOG_INFO("%s: picking device: %s\n", __func__, [[device name] UTF8String]);
+# else
     GGML_METAL_LOG_INFO("%s: picking default device: %s\n", __func__, [[device name] UTF8String]);
+#endif
 
     // Configure context
     struct ggml_metal_context * ctx = malloc(sizeof(struct ggml_metal_context));
