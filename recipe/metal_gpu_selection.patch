diff --git a/ggml-metal.m b/ggml-metal.m
index 1825d332..307bb505 100644
--- a/ggml-metal.m
+++ b/ggml-metal.m
@@ -268,6 +268,22 @@ static void ggml_metal_log(enum ggml_log_level level, const char * format, ...){
 
     // Pick and show default Metal device
     id<MTLDevice> device = MTLCreateSystemDefaultDevice();
+    if (device == nil) {
+        /* 
+        In macOS, in order for the system to provide a default Metal device object, you must link to the Core Graphics framework. 
+        You usually need to do this explicitly if you’re writing apps that don’t use graphics by default, such as command line tools.
+        */
+        NSArray * devices = MTLCopyAllDevices();
+        for (id<MTLDevice> dev in devices) {
+            if (dev != nil) {
+                if (device == nil) {
+                    device = dev;
+                } else {
+                    [dev release];
+                }
+            }
+        }
+    }
     GGML_METAL_LOG_INFO("%s: picking default device: %s\n", __func__, [[device name] UTF8String]);
 
     // Configure context
@@ -2507,6 +2523,22 @@ static enum ggml_status ggml_metal_graph_compute(
 static id<MTLDevice> ggml_backend_metal_get_device(void) {
     if (g_backend_device == nil) {
         g_backend_device = MTLCreateSystemDefaultDevice();
+        if (g_backend_device == nil) {
+            /* 
+            In macOS, in order for the system to provide a default Metal device object, you must link to the Core Graphics framework. 
+            You usually need to do this explicitly if you’re writing apps that don’t use graphics by default, such as command line tools.
+            */
+            NSArray * devices = MTLCopyAllDevices();
+            for (id<MTLDevice> dev in devices) {
+                if (dev != nil) {
+                    if (g_backend_device == nil) {
+                        g_backend_device = dev;
+                    } else {
+                        [dev release];
+                    }
+                }
+            }
+        }        
     }
 
     g_backend_device_ref_count++;
