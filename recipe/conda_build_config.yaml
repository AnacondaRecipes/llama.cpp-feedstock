macos_min_version:
  - 10.12 # [osx and x86_64]
MACOSX_DEPLOYMENT_TARGET:
  - 10.12 # [osx and x86_64]
CONDA_BUILD_SYSROOT:
  - /opt/MacOSX10.12.sdk        # [osx and x86_64]

# To provide "restrict", otherwise compilation errors
c_compiler:
  - vs2019                     # [win]
cxx_compiler:
  - vs2019                     # [win]

blas_impl:
  - mkl                        # [(x86 or x86_64) and not osx]
  - openblas                   # [not win and not osx]
  - accelerate                 # [osx]

gpu_variant:
  - none
  - metal                      # [osx and arm64]
  - cuda-11                    # [linux and x86_64]
  - cuda-12                    # [linux and x86_64]
# CONDA_BUILD_SYSROOT is defined in the base cbc.yaml, but it's reflected here so we can zip the keys and
# build GPU and CPU at the same time for osx-arm64. It'll need to be manually updated here if the base cbc is changed.
# This could be done using extend_keys instead, with a change to the base cbc.yaml.
# However there's currently a conda-build bug that prevents this: https://github.com/conda/conda-build/issues/5048
MACOSX_SDK_VERSION:          # [(osx and arm64)]
  - 11.1                     # [(osx and arm64)]
  - 12.3                     # [(osx and arm64)]
CONDA_BUILD_SYSROOT:         # [(osx and arm64)]
  - /Library/Developer/CommandLineTools/SDKs/MacOSX11.1.sdk  # [(osx and arm64)]
  - /Library/Developer/CommandLineTools/SDKs/MacOSX12.3.sdk  # [(osx and arm64)]
zip_keys:                    # [(osx and arm64)]
  - gpu_variant              # [(osx and arm64)]
  - MACOSX_SDK_VERSION       # [(osx and arm64)]
  - CONDA_BUILD_SYSROOT      # [(osx and arm64)]

# the below for cuda-12 only
cuda_compiler_version:         # [linux and x86_64]
  - 12.3                       # [linux and x86_64]
cuda_compiler:                 # [linux and x86_64]
  - cuda-nvcc                  # [linux and x86_64]